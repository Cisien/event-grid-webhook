// <auto-generated />
using System;
using EventGridWebhook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EventGridWebhook.Data.Migrations
{
    [DbContext(typeof(SensorDataDbContext))]
    [Migration("20191116064115_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EventGridWebhook.Data.SensorEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<long>("DewPoint_F")
                        .HasColumnType("bigint");

                    b.Property<long>("Humidity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("P0_3_um_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P0_3_um_B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P0_5_um_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P0_5_um_B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P10_0_um_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P10_0_um_B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P1_0_um_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P1_0_um_B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P2_5_um_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P2_5_um_B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P5_0_um_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P5_0_um_B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PM10_0_ug_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PM10_0_ug_B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PM1_0_ug_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PM1_0_ug_B")
                        .HasColumnType("numeric");

                    b.Property<string>("PM2_5IndexColor_A")
                        .HasColumnType("text");

                    b.Property<string>("PM2_5IndexColor_B")
                        .HasColumnType("text");

                    b.Property<long>("PM2_5Index_A")
                        .HasColumnType("bigint");

                    b.Property<long>("PM2_5Index_B")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PM2_5_ug_A")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PM2_5_ug_B")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Pressure_mB")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("SampleTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Temperature_F")
                        .HasColumnType("bigint");

                    b.Property<long>("Uptime")
                        .HasColumnType("bigint");

                    b.Property<long>("WifiSignalStrength")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SampleTime");

                    b.ToTable("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
